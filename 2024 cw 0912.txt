**************09/12/2024**************
Merge Two Dictionaries
Write a Python function to merge two dictionaries.
Input: {'a': 1, 'b': 2}, {'b': 3, 'c': 4}
Output: {'a': 1, 'b': 3, 'c': 4}

Ans: 
def merge_dictionaries(dict1, dict2):
    
    merged_dict = {**dict1, **dict2}
    return merged_dict


dict1 = {'a': 1, 'b': 2}
dict2 = {'b': 3, 'c': 4}
result = merge_dictionaries(dict1, dict2)
print(result)  # Output: {'a': 1, 'b': 3, 'c': 4}



 Find Key with Maximum Value
Write a Python function to find the key with the maximum value in a dictionary.
Input: {'a': 10, 'b': 20, 'c': 5}
Output: 'b'

Ans: 
def find_key_with_max_value(input_dict):
  
    max_key = max(input_dict, key=input_dict.get)
    return max_key


input_dict = {'a': 10, 'b': 20, 'c': 5}
result = find_key_with_max_value(input_dict)
print(result)  # Output: 'b'



Invert a Dictionary
Write a Python function to invert a dictionary (swap keys and values).
Input: {'a': 1, 'b': 2, 'c': 3}
Output: {1: 'a', 2: 'b', 3: 'c'}

Ans: 
def invert_dictionary(input_dict):
  
    inverted_dict = {value: key for key, value in input_dict.items()}
    return inverted_dict

input_dict = {'a': 1, 'b': 2, 'c': 3}
result = invert_dictionary(input_dict)
print(result)  # Output: {1: 'a', 2: 'b', 3: 'c'}




Group Anagrams Using a Dictionary
Write a Python function to group anagrams from a list of words using a dictionary.
Input: ['eat', 'tea', 'tan', 'ate', 'nat', 'bat']
Output: [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]

Ans: 
from collections import defaultdict

def group_anagrams(words):
    
    anagrams = defaultdict(list)
    
    for word in words:
       
        key = tuple(sorted(word))
        anagrams[key].append(word)
    
   
    return list(anagrams.values())


words = ['eat', 'tea', 'tan', 'ate', 'nat', 'bat']
result = group_an




Compress a String Using the Counts of Repeated Characters 
Write a Python function to perform basic string compression using the counts of repeated characters.
Input: "aabcccccaaa"
Output: "a2b1c5a3"

Ans:
def compress_string(s):
   
    compressed = []
    count = 1

    
    for i in range(1, len(s)):
        
        if s[i] == s[i - 1]:
            count += 1
        else:
            
            compressed.append(s[i - 1] + str(count))
            count = 1

    compressed.append(s[-1] + str(count))

    return ''.join(compressed)


input_str = "aabcccccaaa"
result = compress_string(input_str)
print(result)  # Output: "a2b1c5a3"
